{"version":3,"sources":["skylark-langx-urls.js"],"names":["define","skylark","attach","urls","getAbsoluteUrl","url","match","div","document","createElement","innerHTML","firstChild","href","getFileExtension","path","splitPathRe","pathParts","exec","pop","toLowerCase","getFileName","split","parseUrl","props","a","addToBody","host","protocol","setAttribute","body","appendChild","details","i","length","replace","window","location","removeChild","isCrossOrigin","winLoc","urlInfo","types","klass","Path","_construct","_","this","segments","hasLeading","hasTrailing","arguments","isString","_parse","isArray","_canonicalize","doIt","stack","push","_length","anotherPath","charAt","shift","append","tail","appendPathStr","appendPath","isAbsolute","mySegments","tailSegments","newSegments","concat","result","clone","endsWith","equals","another","anotherSegments","firstSegment","getExtension","extension","textension","substr","lastIndexOf","getSegments","getParentPath","parentPath","parentSegments","getRoot","lastSegment","matchingFirstSegments","pathSegments","max","Math","min","count","normalize","removeFirstSegments","slice","removeLastSegments","removeMatchingFirstSegments","removeMatchingLastSegments","removeRelative","segs","relativeTo","base","ignoreFilename","baseSegments","commonLength","baseSegmentLength","differenceLength","newSegmentLength","EMPTY","segment","index","startsWith","toString","join","get","main"],"mappings":"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","file":"../skylark-langx-urls.js","sourcesContent":["define('skylark-langx-urls/urls',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark){\r\n\r\n\r\n    return skylark.attach(\"langx.urls\",{\r\n\r\n    });\r\n});\r\n\r\n\r\n\ndefine('skylark-langx-urls/getAbsoluteUrl',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    const getAbsoluteUrl = function (url) {\r\n        if (!url.match(/^https?:\\/\\//)) {\r\n            const div = document.createElement('div');\r\n            div.innerHTML = `<a href=\"${ url }\">x</a>`;\r\n            url = div.firstChild.href;\r\n        }\r\n        return url;\r\n    };\r\n\r\n    return urls.getAbsoluteUrl = getAbsoluteUrl;\r\n\r\n});\ndefine('skylark-langx-urls/getFileExtension',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    const getFileExtension = function (path) {\r\n        if (typeof path === 'string') {\r\n            const splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/;\r\n            const pathParts = splitPathRe.exec(path);\r\n            if (pathParts) {\r\n                return pathParts.pop().toLowerCase();\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return urls.getFileExtension = getFileExtension;\r\n\r\n});\n   define('skylark-langx-urls/getFileName',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    function getFileName (url) {\r\n        var fileName = url.split('/').pop() || \"\";\r\n        return fileName;\r\n    }\r\n\r\n    return urls.getFileName = getFileName;\r\n\r\n});\ndefine('skylark-langx-urls/parseUrl',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n    const parseUrl = function (url) {\r\n        const props = [\r\n            'protocol',\r\n            'hostname',\r\n            'port',\r\n            'pathname',\r\n            'search',\r\n            'hash',\r\n            'host'\r\n        ];\r\n        let a = document.createElement('a');\r\n        a.href = url;\r\n        const addToBody = a.host === '' && a.protocol !== 'file:';\r\n        let div;\r\n        if (addToBody) {\r\n            div = document.createElement('div');\r\n            div.innerHTML = `<a href=\"${ url }\"></a>`;\r\n            a = div.firstChild;\r\n            div.setAttribute('style', 'display:none; position:absolute;');\r\n            document.body.appendChild(div);\r\n        }\r\n        const details = {};\r\n        for (let i = 0; i < props.length; i++) {\r\n            details[props[i]] = a[props[i]];\r\n        }\r\n        if (details.protocol === 'http:') {\r\n            details.host = details.host.replace(/:80$/, '');\r\n        }\r\n        if (details.protocol === 'https:') {\r\n            details.host = details.host.replace(/:443$/, '');\r\n        }\r\n        if (!details.protocol) {\r\n            details.protocol = window.location.protocol;\r\n        }\r\n        if (addToBody) {\r\n            document.body.removeChild(div);\r\n        }\r\n        return details;\r\n    };\r\n\r\n    return urls.parseUrl = parseUrl;\r\n});\ndefine('skylark-langx-urls/isCrossOrigin',[\r\n    './urls',\r\n    \"./parseUrl\"\r\n], function (urls,parseUrl) {\r\n    'use strict';\r\n\r\n    const isCrossOrigin = function (url, winLoc = window.location) {\r\n        const urlInfo = parseUrl(url);\r\n        const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\r\n        const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\r\n        return crossOrigin;\r\n    };\r\n\r\n    return urls.isCrossOrigin = isCrossOrigin;\r\n\r\n});\ndefine('skylark-langx-urls/Path',[\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-constructs/klass\",\r\n    \"./urls\"\r\n], function(types,klass,urls) {\r\n\r\n    /**\r\n     * @class Path\r\n     * @constructor\r\n     */\r\n    var Path =   klass({\r\n        _construct : function() {\r\n            var _ = this._ = {\r\n                segments : null,\r\n                hasLeading : false,\r\n                hasTrailing : false\r\n            };\r\n            if (arguments.length == 1 && types.isString(arguments[0])) {\r\n                  this._parse(arguments[0]);\r\n            } else  if (types.isArray(arguments[0])){\r\n                _.segments = arguments[0];\r\n                _.hasLeading = arguments[1] || false;\r\n                _.hasTrailing = arguments[2] || false;\r\n                this._canonicalize();                \r\n            }\r\n        },\r\n\r\n        _canonicalize: function() {\r\n            var doIt;\r\n            var segments = this._.segments;\r\n            for (var i = 0; i < segments.length; i++) {\r\n                if (segments[i] == \".\" || segments[i] == \"..\") {\r\n                    doIt = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (doIt) {\r\n                var stack = [];\r\n                for (var i = 0; i < segments.length; i++) {\r\n                    if (segments[i] == \"..\") {\r\n                        if (stack.length == 0) {\r\n                            // if the stack is empty we are going out of our scope\r\n                            // so we need to accumulate segments.  But only if the original\r\n                            // path is relative.  If it is absolute then we can't go any higher than\r\n                            // root so simply toss the .. references.\r\n                            if (!this.hasLeading) {\r\n                                stack.push(segments[i]); //stack push\r\n                            }\r\n                        } else {\r\n                            // if the top is '..' then we are accumulating segments so don't pop\r\n                            if (\"..\" == stack[stack.length - 1]) {\r\n                                stack.push(\"..\");\r\n                            } else {\r\n                                stack.pop();\r\n                            }\r\n                        }\r\n                        //collapse current references\r\n                    } else if (segments[i] != \".\" || segments.length == 1) {\r\n                        stack.push(segments[i]); //stack push\r\n                    }\r\n                }\r\n                //if the number of segments hasn't changed, then no modification needed\r\n                if (stack.length == segments.length) {\r\n                    return;\r\n                }\r\n                this._.segments = stack;\r\n            }\r\n        },\r\n\r\n        _length: function(anotherPath) {\r\n            return this._.segments.length;\r\n        },\r\n\r\n\r\n        _parse : function( /*String*/ path) {\r\n            if (!path) {\r\n                path = \".\";\r\n            }\r\n            var _ = this._,\r\n                segments = path.split(\"/\");\r\n\r\n            if (path.charAt(0) == \"/\") {\r\n                _.hasLeading = true;\r\n                segments.shift();\r\n            }\r\n            if (path.charAt(path.length - 1) == \"/\") {\r\n                _.hasTrailing = true;\r\n                // If the path ends in '/', split() will create an array whose last element\r\n                // is an empty string. Remove that here.\r\n                segments.pop();\r\n            }\r\n            _.segments = segments;\r\n            _.path = path;\r\n\r\n            this._canonicalize()\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method append\r\n         *@parameter {Path|String}tail\r\n         *@return {Path}\r\n         */\r\n        append: /*Path*/ function( /*Path*/ tail) {\r\n            if (types.isString(tail)) {\r\n                return this.appendPathStr(tail);\r\n            } else {\r\n                return this.appendPath(tail);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method appendPath\r\n         *@parameter {Path}tail\r\n         *@return {Path}\r\n         */\r\n        appendPath: /*Path*/ function( /*Path*/ tail) {\r\n            if (tail.isAbsolute()) {\r\n                return tail;\r\n            }\r\n            var mySegments = this.segments,\r\n                tailSegments = tail.segments,\r\n                newSegments = mySegments.concat(tailSegments),\r\n                result = new Path(newSegments, this.hasLeading, tail.hasTrailing);\r\n            return result;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method appendPathStr\r\n         *@parameter {String}tail\r\n         *@return {Path}\r\n         */\r\n        appendPathStr: function( /*String*/ tail) {\r\n            tail = new Path(tail || \"\");\r\n            return this.appendPath(tail);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method clone\r\n         *@return {Path}\r\n         */\r\n        \"clone\": function() {\r\n            return new Path(this.segments, this.hasLeading, this.hasTrailing);\r\n        },\r\n\r\n        /*\r\n         *Tests if this path ends with the given path.\r\n         *@method endsWidth\r\n         *@parameter {String}tail\r\n         *@return {Boolean}\r\n         */\r\n        \"endsWith\": /*Boolean*/ function( /*String*/ tail) {\r\n            var segments = this.segments;\r\n            var tailSegments = (new Path(tail)).segments;\r\n            while (tailSegments.length > 0 && segments.length > 0) {\r\n                if (tailSegments.pop() != segments.pop()) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         *Tests this path for equality with the given object.\r\n         *@method equals\r\n         *@parameter {Path}another\r\n         *@return {Boolean}\r\n         */\r\n        \"equals\": /*Boolean*/ function( /*Path*/ another) {\r\n            var segments = this._.segments,\r\n                anotherSegments = another._.segments;\r\n            if (segments.length != anotherSegments.length) {\r\n                return false;\r\n            }\r\n            for (var i = 0; i < segments.length; i++) {\r\n                if (anotherSegments[i] != segments[i]) {\r\n                    return false;\r\n                };\r\n            }\r\n            return true;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method firstSegment\r\n         *@parameter {Number}length\r\n         *@return {String}\r\n         */\r\n        firstSegment: /*String*/ function( /*Number*/ length) {\r\n            var segments = this._.segments;\r\n            return segments[length || 0];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getExtension\r\n         *@return {String}\r\n         */\r\n        getExtension: function() {\r\n            var extension = this._.extension,\r\n                path = this._.path;\r\n            if (!textension) {\r\n                extension = this._.extension = path.substr(path.lastIndexOf('.') + 1);\r\n            }\r\n            return extension;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getSegments\r\n         *@return {Array}\r\n         */\r\n        getSegments: /*Array*/ function() {\r\n            return this.segments;\r\n        },\r\n\r\n        /*\r\n         *Returns the parent path, or null if this path does not have a parent.\r\n         *@method getParentPath\r\n         *@return {Path}\r\n         */\r\n        getParentPath: /*Path*/ function() {\r\n            var parentPath = this._.parentPath;\r\n            if (!parentPath) {\r\n                var parentSegments = this.segments;\r\n                parentSegments.pop();\r\n                parentPath = this._.parentPath = new Path(parentSegments, this.hasLeading);\r\n            }\r\n            return parentPath;\r\n        },\r\n\r\n\r\n        /*\r\n         *Returns the root component of this path as a Path object, or null if this path does not have a root component.\r\n         *@method getRoot\r\n         *@return {Path}\r\n         */\r\n        \"getRoot\": /*Path*/ function() {\r\n            //TODO: will be implemented\r\n        },\r\n\r\n        /*\r\n         *Tells whether or not this path is absolute.\r\n         *@method isAbsolute\r\n         *@return {Boolean}\r\n         */\r\n        isAbsolute: /*Boolean*/ function() {\r\n            return this.hasLeading;\r\n        },\r\n\r\n\r\n        /*\r\n         *\r\n         *@method lastSegment\r\n         *@ return {String}\r\n         */\r\n        lastSegment: /*String*/ function() {\r\n            var segments = this._.segments;\r\n            return segments[segments.length - 1];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method matchingFirstSegments\r\n         *@parameter {Path}another\r\n         *@return {Number}\r\n         */\r\n        matchingFirstSegments: /*Number*/ function( /*Path*/ another) {\r\n            var mySegments = this.segments;\r\n            var pathSegments = another.segments;\r\n            var max = Math.min(mySegments.length, pathSegments.length);\r\n            var count = 0;\r\n            for (var i = 0; i < max; i++) {\r\n                if (mySegments[i] != pathSegments[i]) {\r\n                    return count;\r\n                }\r\n                count++;\r\n            }\r\n            return count;\r\n        },\r\n\r\n        /*\r\n         *Returns a path that is this path with redundant name elements eliminated.\r\n         *@method normalize\r\n         *@return {Path}\r\n         */\r\n        \"normalize\": /*Path*/ function() {\r\n            //TODO: will be implemented\r\n        },\r\n\r\n\r\n        /*\r\n         *\r\n         *@method removeFirstSegments\r\n         *@parameter {Number}count\r\n         *@return {Path}\r\n         */\r\n        removeFirstSegments: /*Path*/ function( /*Number*/ count) {\r\n            var segments = this._.segments,\r\n                hasLeading = this._.hasLeading;\r\n            hasTrailing = this._.hasTrailing;\r\n\r\n            return new Path(segments.slice(count, segments.length), hasLeading, hasTrailing);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeLastSegments\r\n         *@parameter {Number}count\r\n         *@return {Path}\r\n         */\r\n        removeLastSegments: /*Path*/ function( /*Number?*/ count) {\r\n            var segments = this._.segments,\r\n                hasLeading = this._.hasLeading;\r\n            hasTrailing = this._.hasTrailing;\r\n\r\n            if (!count) {\r\n                count = 1;\r\n            }\r\n\r\n            return new Path(segments.slice(0, segments.length - count), hasLeading, hasTrailing);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeMatchingFirstSegments\r\n         *@parameter {Path}another\r\n         *@return {Path}\r\n         */\r\n        removeMatchingFirstSegments: /*Path*/ function( /*Path*/ another) {\r\n            var match = this.matchingFirstSegments(another);\r\n            return this.removeFirstSegments(match);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeMatchingLastSegments\r\n         *@parameter {Path}another\r\n         *@return {Path}\r\n         */\r\n        removeMatchingLastSegments: /*Path*/ function( /*Path*/ another) {\r\n            var match = this.matchingFirstSegments(anotherPath);\r\n            return this.removeLastSegments(match);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeRelative\r\n         *@return {Path}\r\n         */\r\n        removeRelative: function() {\r\n            var segs = this.segments;\r\n            if (segs.length > 0 && segs[1] == \".\")\r\n                return this.removeFirstSegments(1);\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *Constructs a relative path between this path and a given path.\r\n         *@method relativeTo\r\n         *@parameter {Path}base\r\n         *@return {Path}\r\n         */\r\n        relativeTo: /*Path*/ function( /*Path|String*/ base, /*Boolean*/ ignoreFilename) {\r\n            if (typeof base == 'string') {\r\n                base = new Path(base);\r\n            }\r\n            var mySegments = this.segments;\r\n            if (this.isAbsolute()) {\r\n                return this;\r\n            }\r\n            var baseSegments = base.segments;\r\n            var commonLength = this.matchingFirstSegments(base);\r\n            var baseSegmentLength = baseSegments.length;\r\n            if (ignoreFilename) {\r\n                baseSegmentLength = baseSegmentLength - 1;\r\n            }\r\n            var differenceLength = baseSegmentLength - commonLength;\r\n            var newSegmentLength = differenceLength + mySegments.length - commonLength;\r\n            if (newSegmentLength == 0) {\r\n                return Path.EMPTY;\r\n            }\r\n            var newSegments = [];\r\n            for (var i = 0; i < differenceLength; i++) {\r\n                newSegments.push('..');\r\n            }\r\n            for (var i = commonLength; i < mySegments.length; i++) {\r\n                newSegments.push(mySegments[i]);\r\n            }\r\n            return new Path(newSegments, false, this.hasTrailing);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method segment\r\n         *@parameter {Number}index\r\n         *@return {String}\r\n         */\r\n        segment: /*String*/ function( /*Number*/ index) {\r\n            var segments = this._.segments;\r\n            if (segments.length < index) return null;\r\n            return segments[index];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method startsWith\r\n         *@parameter {Path}index\r\n         *@return {Boolean}\r\n         */\r\n        startsWith: /*Boolean*/ function( /*Path*/ another) {\r\n            var count = this.matchingFirstSegments(another);\r\n            return another._length() == count;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method toString\r\n         *@return {String}\r\n         */\r\n        toString: function() {\r\n            var result = [],\r\n                segments = this._.segments;\r\n            if (this.hasLeading) {\r\n                result.push(\"/\");\r\n            }\r\n            for (var i = 0; i < segments.length; i++) {\r\n                if (i > 0) {\r\n                    result.push(\"/\");\r\n                }\r\n                result.push(segments[i]);\r\n            }\r\n            if (this.hasTrailing) {\r\n                result.push(\"/\");\r\n            }\r\n            return result.join(\"\");\r\n        },\r\n\r\n        hasLeading : {\r\n            get : function() {\r\n                return this._.hasLeading\r\n            }\r\n        },\r\n\r\n        hasTrailing : {\r\n            get : function() {\r\n                return this._.hasTrailing\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n\r\n    Path.EMPTY = new Path(\"\");\r\n\r\n    return urls.Path = Path;\r\n});\r\n\ndefine('skylark-langx-urls/main',[\r\n\t\"./urls\",\r\n\t\"./getAbsoluteUrl\",\r\n\t\"./getFileExtension\",\r\n\t\"./getFileName\",\r\n\t\"./isCrossOrigin\",\r\n\t\"./parseUrl\",\r\n\t\"./Path\"\r\n],function(urls){\r\n\treturn urls;\r\n});\ndefine('skylark-langx-urls', ['skylark-langx-urls/main'], function (main) { return main; });\n\n"]}