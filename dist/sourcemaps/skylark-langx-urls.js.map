{"version":3,"sources":["skylark-langx-urls.js"],"names":["define","skylark","attach","urls","digits","createObjectURL","data","contentType","forceDataSchema","URL","blob","Blob","type","buffer","i","ii","length","b1","b2","b3","d1","d2","d3","d4","createValidAbsoluteUrl","url","baseUrl","absoluteUrl","protocol","_isValidProtocol","ex","getAbsoluteUrl","match","div","document","createElement","innerHTML","firstChild","href","getFileExtension","path","splitPathRe","pathParts","exec","pop","toLowerCase","getFileName","anchor","indexOf","query","end","Math","min","substring","lastIndexOf","getQuery","querystring","pairs","split","keyval","decodeURIComponent","e","undefined","parseUrl","props","a","addToBody","host","setAttribute","body","appendChild","details","replace","window","location","removeChild","isCrossOrigin","winLoc","urlInfo","isSameOrigin","otherUrl","base","origin","other","main"],"mappings":"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","file":"../skylark-langx-urls.js","sourcesContent":["define('skylark-langx-urls/urls',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark){\r\n\r\n\r\n    return skylark.attach(\"langx.urls\",{\r\n\r\n    });\r\n});\r\n\r\n\r\n\ndefine('skylark-langx-urls/create_object_url',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    const digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n    function createObjectURL(data, contentType, forceDataSchema = false) {\r\n        if (!forceDataSchema && URL.createObjectURL) {\r\n            const blob = new Blob([data], { type: contentType });\r\n            return URL.createObjectURL(blob);\r\n        }\r\n        let buffer = `data:${ contentType };base64,`;\r\n        for (let i = 0, ii = data.length; i < ii; i += 3) {\r\n            const b1 = data[i] & 255;\r\n            const b2 = data[i + 1] & 255;\r\n            const b3 = data[i + 2] & 255;\r\n            const d1 = b1 >> 2, d2 = (b1 & 3) << 4 | b2 >> 4;\r\n            const d3 = i + 1 < ii ? (b2 & 15) << 2 | b3 >> 6 : 64;\r\n            const d4 = i + 2 < ii ? b3 & 63 : 64;\r\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\r\n        }\r\n        return buffer;\r\n    };\r\n\r\n\r\n    return urls.createObjectURL = createObjectURL;\r\n\r\n});\r\n\r\n\ndefine('skylark-langx-urls/create_valid_absolute_url',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    function _isValidProtocol(url) {\r\n        if (!url) {\r\n            return false;\r\n        }\r\n        switch (url.protocol) {\r\n        case 'http:':\r\n        case 'https:':\r\n        case 'ftp:':\r\n        case 'mailto:':\r\n        case 'tel:':\r\n            return true;\r\n        default:\r\n            return false;\r\n        }\r\n    }\r\n    function createValidAbsoluteUrl(url, baseUrl) {\r\n        if (!url) {\r\n            return null;\r\n        }\r\n        try {\r\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\r\n            if (_isValidProtocol(absoluteUrl)) {\r\n                return absoluteUrl;\r\n            }\r\n        } catch (ex) {\r\n        }\r\n        return null;\r\n    }\r\n\r\n    return urls.createValidAbsoluteUrl = createValidAbsoluteUrl;\r\n\r\n});\r\n\r\n\ndefine('skylark-langx-urls/get-absolute-url',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    const getAbsoluteUrl = function (url) {\r\n        if (!url.match(/^https?:\\/\\//)) {\r\n            const div = document.createElement('div');\r\n            div.innerHTML = `<a href=\"${ url }\">x</a>`;\r\n            url = div.firstChild.href;\r\n        }\r\n        return url;\r\n    };\r\n\r\n    return urls.getAbsoluteUrl = getAbsoluteUrl;\r\n\r\n});\ndefine('skylark-langx-urls/get-file-extension',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    const getFileExtension = function (path) {\r\n        if (typeof path === 'string') {\r\n            const splitPathRe = /^(\\/?)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?)(\\.([^\\.\\/\\?]+)))(?:[\\/]*|[\\?].*)$/;\r\n            const pathParts = splitPathRe.exec(path);\r\n            if (pathParts) {\r\n                return pathParts.pop().toLowerCase();\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n\r\n    return urls.getFileExtension = getFileExtension;\r\n\r\n});\n   define('skylark-langx-urls/get-file-name',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    function getFileName (url) {\r\n        ///var fileName = url.split('/').pop() || \"\";\r\n        ///return fileName;\r\n        const anchor = url.indexOf('#');\r\n        const query = url.indexOf('?');\r\n        const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\r\n        return url.substring(url.lastIndexOf('/', end) + 1, end);         \r\n    }\r\n\r\n\r\n\r\n\r\n    return urls.getFileName = getFileName;\r\n\r\n});\ndefine('skylark-langx-urls/get-query',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\tfunction getQuery(querystring) {\r\n\t\tvar query = {};\r\n\r\n\t\tvar pairs = querystring.split('&'),\r\n\t\t    length = pairs.length,\r\n\t\t    keyval = [],\r\n\t\t    i = 0;\r\n\r\n\t\tfor (; i < length; i++) {\r\n\t\t  keyval = pairs[i].split('=', 2);\r\n\t\t  try {\r\n\t\t    keyval[0] = decodeURIComponent(keyval[0]); // key\r\n\t\t    keyval[1] = decodeURIComponent(keyval[1]); // value\r\n\t\t  } catch (e) {}\r\n\r\n\t\t  if (query[keyval[0]] === undefined) {\r\n\t\t    query[keyval[0]] = keyval[1];\r\n\t\t  } else {\r\n\t\t    query[keyval[0]] += ',' + keyval[1];\r\n\t\t  }\r\n\t\t}\r\n\r\n\t\treturn query;\r\n\t}\r\n\r\n\treturn urls.getQuery = getQuery;\r\n\r\n});\ndefine('skylark-langx-urls/parse-url',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n    const parseUrl = function (url) {\r\n        const props = [\r\n            'protocol',\r\n            'hostname',\r\n            'port',\r\n            'pathname',\r\n            'search',\r\n            'hash',\r\n            'host'\r\n        ];\r\n        let a = document.createElement('a');\r\n        a.href = url;\r\n        const addToBody = a.host === '' && a.protocol !== 'file:';\r\n        let div;\r\n        if (addToBody) {\r\n            div = document.createElement('div');\r\n            div.innerHTML = `<a href=\"${ url }\"></a>`;\r\n            a = div.firstChild;\r\n            div.setAttribute('style', 'display:none; position:absolute;');\r\n            document.body.appendChild(div);\r\n        }\r\n        const details = {};\r\n        for (let i = 0; i < props.length; i++) {\r\n            details[props[i]] = a[props[i]];\r\n        }\r\n        if (details.protocol === 'http:') {\r\n            details.host = details.host.replace(/:80$/, '');\r\n        }\r\n        if (details.protocol === 'https:') {\r\n            details.host = details.host.replace(/:443$/, '');\r\n        }\r\n        if (!details.protocol) {\r\n            details.protocol = window.location.protocol;\r\n        }\r\n        if (addToBody) {\r\n            document.body.removeChild(div);\r\n        }\r\n        return details;\r\n    };\r\n\r\n    return urls.parseUrl = parseUrl;\r\n});\ndefine('skylark-langx-urls/is-cross-origin',[\r\n    './urls',\r\n    \"./parse-url\"\r\n], function (urls,parseUrl) {\r\n    'use strict';\r\n\r\n    const isCrossOrigin = function (url, winLoc = window.location) {\r\n        const urlInfo = parseUrl(url);\r\n        const srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;\r\n        const crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;\r\n        return crossOrigin;\r\n    };\r\n\r\n    return urls.isCrossOrigin = isCrossOrigin;\r\n\r\n});\ndefine('skylark-langx-urls/is_same_origin',[\r\n    './urls'\r\n], function (urls) {\r\n    'use strict';\r\n\r\n    function isSameOrigin(baseUrl, otherUrl) {\r\n        let base;\r\n        try {\r\n            base = new URL(baseUrl);\r\n            if (!base.origin || base.origin === 'null') {\r\n                return false;\r\n            }\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        const other = new URL(otherUrl, base);\r\n        return base.origin === other.origin;\r\n    }\r\n\r\n    return urls.isSameOrigin = isSameOrigin;\r\n\r\n});\r\n\ndefine('skylark-langx-urls/main',[\r\n\t\"./urls\",\r\n\t\"./create_object_url\",\r\n\t\"./create_valid_absolute_url\",\r\n\t\"./get-absolute-url\",\r\n\t\"./get-file-extension\",\r\n\t\"./get-file-name\",\r\n\t\"./get-query\",\r\n\t\"./is-cross-origin\",\r\n\t\"./is_same_origin\",\r\n\t\"./parse-url\"\r\n],function(urls){\r\n\treturn urls;\r\n});\ndefine('skylark-langx-urls', ['skylark-langx-urls/main'], function (main) { return main; });\n\n"]}